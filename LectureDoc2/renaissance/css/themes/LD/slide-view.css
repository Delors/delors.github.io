/* LAYER: theme.ld.slide-view */

:root {
    --ld-rel-max-supplemental-area-width: 85%;
    --ld-rel-max-supplemental-area-height: 85%;
}

/*  Styling of supplemental information.

    Each slide can only have one block with supplemental information. The 
    supplemental information is placed differently in the DOM in the different 
    views.
    
    In the slide view the element remains in the DOM at it is original place. 
    
    In the slide view the DIV with the supplemental information is positioned at the
    right side in the slide mode.
*/
#ld-slides-pane {

    /*  Done by Javascript: Aggregation of all supplemental information in one 
        ld-supplemental element: */
    .ld-slide ld-supplementals {
        display: block;
        max-width: var(--ld-rel-max-supplemental-area-width);
        max-height: var(--ld-rel-max-supplemental-area-height);
        margin: 0;
        border-radius: var(--slide-border-radius) 0 0 var(--slide-border-radius);
        padding: calc(var(--slide-tb-padding) * 0.75) calc(var(--slide-lr-padding) * 0.75);
        /* the factor has to be larger than the factor used by translate (see below) */

        position: absolute;
        top: 0;
        right: 0;
        z-index: 1;

        overflow-y: scroll;

        background-color: rgb(from var(--slide-background-color) r g b / 0.5);
        -webkit-backdrop-filter: blur(25px);
        backdrop-filter: blur(25px);

        transform:
            translateX(calc(100% - var(--slide-lr-padding) * 0.5)) translateY(calc(var(--ld-slide-height) * 0.5 - (100% * 0.5)));
        box-shadow: var(--trbl-shadow);
        transition: 0.75s;


        /*  We can't use the :hover pseudo class here, because we want to be able to 
        apply the styling in the non-primary window. */
        &.hover\:ld-supplementals {
            /* the selector needs to be more specific than the general .supplemental selector. */
            transform:
                translateX(0%) translateY(calc(var(--ld-slide-height) * 0.5 - (100% * 0.5)));
            transition: 0.75s;
            box-shadow: var(--trbl-shadow-dark);
        }

        .supplemental + .supplemental {
            margin-top: 0.5em;
            border-top: 1px dashed var(--dhbw-dark-gray);
            padding-top: 0.5em;
        }
    }
}




/*
    Generic styling for per-slide footer elements.
*/
.footer-left,
.footer-right,
.block-footer {
    position: absolute;

    font-size: var(--slide-footer-font-size);
}

.footer-left {
    bottom: var(--slide-lr-padding);
}

.footer-right {
    bottom: var(--slide-tb-padding);
    right: var(--slide-lr-padding);
}

/*
Converts a container into a generic footer element. Intended to be combined 
with other classes to style the block footer.
*/
.block-footer {
    bottom: 0;
    left: 0;
    width: var(--ld-slide-width);
    height: var(--slide-footer-height);
    padding-left: var(--slide-lr-padding);
    padding-right: var(--slide-lr-padding);
    padding-bottom: 1.5em;
}




/*
    "Styling" of Animations

    The following style can generally be composed with the previous styles which
    affect the layout of the slide. 

    Recall that LectureDoc's mechanism to switch slides is to scale a slide 
    to 0 and to scale the next slide to 1 (normally both happens instanteously). 
    Hence, it is often necessary to "reset" the scale level to make animations 
    work.

    Currently, we support these animations:
    transition-*
    - fade
    - scale
    - move-left
    - move-to-top
    - flip
*/

@keyframes scale-to-zero {
    100% {
        scale: 0;
    }
}

#ld-slides-pane .ld-current-slide.transition-move-left {
    animation: 3s slide-move-left-in;
}

#ld-slides-pane .ld-previous-slide:has(+.ld-slide.transition-move-left.ld-current-slide) {
    animation: 3s slide-move-left-out, 0s 3s scale-to-zero;
}


@keyframes slide-move-left-in {
    0.1% {
        /* it works beautifully with 0.1% and awfully with 0%...*/
        translate: 100%;
        opacity: 0;
    }

    70% {
        opacity: 100%;
    }

    100% {
        translate: 0%;
    }
}

@keyframes slide-move-left-out {
    0% {
        scale: 1;
        /* reset the scale level to make the slide visible (again) */
        translate: 0%;
    }

    30% {
        opacity: 100%;
    }

    100% {
        opacity: 0%;
        scale: 1;
        translate: -100%;
    }
}

#ld-slides-pane .ld-current-slide.transition-scale {
    animation: 3s slide-scale-in;
}

#ld-slides-pane .ld-previous-slide:has(+.ld-slide.transition-scale.ld-current-slide) {
    animation: 3s slide-scale-out;
}

@keyframes slide-scale-in {
    0.1% {
        opacity: 0;
        scale: 1.5;
    }

    100% {
        opacity: 100%;
        scale: 1;
    }
}

@keyframes slide-scale-out {
    0% {
        scale: 1;
        /* reset the scale level to make the slide visible (again) */
        opacity: 100%;
    }

    100% {
        opacity: 0%;
        scale: 0.5;
    }
}

#ld-slides-pane {

    .ld-current-slide.transition-flip {
        perspective: 3000px;
        transform-style: preserve-3d;
        backface-visibility: hidden;

        animation: 3s flip-in;
    }

    .ld-previous-slide:has(+.ld-slide.ld-current-slide.transition-flip) {
        perspective: 3000px;
        transform-style: preserve-3d;
        backface-visibility: hidden;

        animation: 3s flip-out;
    }
}

@keyframes flip-in {

    0%,
    50% {
        transform: rotateY(90deg);
        scale: 1;
        opacity: 25%;
    }

    100% {
        transform: rotateY(0deg);
        opacity: 100%;
    }
}

@keyframes flip-out {
    0% {
        scale: 1;
    }

    0.1% {
        transform: rotateY(0deg);
        opacity: 100%;
        scale: 1;
    }

    100% {
        transform: rotateY(-180deg);
        opacity: 0%;
        scale: 1;
    }
}



#ld-slides-pane .ld-current-slide.transition-fade {
    animation: 2s slide-fade-in;
}

#ld-slides-pane .ld-previous-slide:has(+.ld-slide.transition-fade.ld-current-slide) {
    animation: 2s slide-fade-out, 0s 2s scale-to-zero;
}

@keyframes slide-fade-in {
    0% {
        opacity: 0;
    }

    100% {
        opacity: 100;
    }
}

@keyframes slide-fade-out {
    0% {
        opacity: 1;
        scale: 1;
        /* reset the scale level to make a fading effect possible */
    }

    100% {
        opacity: 0;
        scale: 1;
    }
}

#ld-slides-pane .ld-current-slide.transition-move-to-top {
    animation: 3s slide-move-old-to-top;
}

#ld-slides-pane .ld-previous-slide:has(+.ld-slide.transition-move-to-top.ld-current-slide) {
    animation: 3s slide-move-bottom-to-center, 0s 3s scale-to-zero;
}

@keyframes slide-move-old-to-top {
    0.1% {
        /* it works beautifully with 0.1% and awfully with 0%...*/
        translate: 0 100%;
        opacity: 0;
    }

    70% {
        opacity: 100%;
    }

    100% {
        translate: 0 0%;
    }
}

@keyframes slide-move-bottom-to-center {
    0% {
        scale: 1;
        /* reset the scale level to make the slide visible (again) */
        translate: 0% 0;
    }

    30% {
        opacity: 100%;
    }

    100% {
        opacity: 0%;
        scale: 1;
        translate: 0 -100%;
    }
}



/*

*/
.ld-slide.excursion {
    border-top: 15px solid darkgray;
    padding-top: calc(var(--slide-tb-padding) - 15px);
    border-bottom: 15px solid darkgray;
    padding-bottom: calc(var(--slide-tb-padding) - 15px);

    &::before {
        content: "📝";
        display: block;
        position: absolute;
        top: 0px;
        right: 15px;
        font-size: 80px;
        text-shadow: 2px 2px 4px var(--dhbw-dark-gray);
        mix-blend-mode: multiply;
        /* makes it easier to use it on various backgrounds */

    }
}


/*

    Styling of Cheat Sheets

*/

.cheat-sheet-8-columns {
    display: flex;
    flex-direction: column;
    flex-wrap: wrap;
    justify-content: space-between;
    align-content: space-between;
    align-items: flex-start;
    gap: 6px 6px;
    font-size: 16px;
    background-color: black;
    padding: 3px;
    border-radius: 6px;

    &.ld-slide::before {
        /* to clear the default logo */
        content: " ";
    }

    div.cheat-sheet-block,
    h1 {
        width: calc(var(--ld-slide-width) / 8 - 6px);
        padding: 4px;
        border-radius: 4px;
        overflow: hidden;
        background-color: white;

        &.title {
            margin: 0;
            padding: 4px;
            /* We have a different font-size and hence have to update the width! */
            width: calc(var(--ld-slide-width) / 8 - 6px);
            background-color: var(--dhbw-light-gray);
            font-size: 2em;
            color: var(--dhbw-red);
            text-shadow: 1px 1px 2px var(--dhbw-gray);
        }
    }

    div.cheat-sheet-block>.rubric:first-child {
        width: calc(100% + 10px);
        margin-bottom: 0;
        position: relative;
        top: -5px;
        left: -5px;
        color: whitesmoke;
        border-radius: 8px 8px 0 0;
        font-size: larger;
        padding: 0.3em 0em 0.3em 0.25em;
        background-color: var(--dhbw-red);
    }

    div.cheat-sheet-block>.rubric:not(:first-child) {
        background-color: var(--dhbw-gray);
        position: relative;
        top: -5px;
        left: -5px;
        color: whitesmoke;
        width: calc(100% + 10px);
        padding: 0.15em 0em 0.15em 0.25em;
        margin-bottom: 0;
    }

    p.rubric+p {
        margin-top: 0;
    }
}


/*  Styling of stacked elements.

    To create elements which stack on top of each other on a single slide 
    (e.g., to create some animation) use a div with the class stack as the 
    parent of the elements in the stack. 
    Each element in the stack is represented by an element (div) with the class 
    layer. 
    
    Use the class overlay to make the background of the layer transparent. 
    
    The first layer must not be an overlay layer.

    Example:

        <div class="stack">
            <div class="layer">...</div>
            <div class="layer overlay incremental">...</div>
            <div class="layer incremental">...</div>
        </div>
    
    The first element in the stack is the bottom most element and rendered 
    first. All other elements are rendered on top of the previous element and
    will hide the underyling elements.
    Add the additional css class overlay to layers that should have a 
    transparent background.

    In general, stack based layouts are most often only useful if the class 
    incremental is added to the layers.
*/


.stack {
    width: 100%;
    /* DON'T SET HEIGHT! */

    position: relative;

    counter-reset: stack-layer 0;

    >.layer {
        /* All layers must have the same margin! */
        margin-bottom: 0.5em;

        &.overlay {
            background-color: transparent;
        }

        &.warning {
            text-align: center;

            background-color: var(--dhbw-red);
            color: white;
        }
    }

    /*  We only add numbers when we have a stack with more than one layer that
        is not an overlay layer.
    */
    &:not(.invisible, .no-numbers):has(.layer:not(.overlay, .no-number, :first-child))>.layer:not(.overlay, .no-number)::before {
        position: absolute;
        right: 0.6em;
        bottom: 0.35em;

        font-size: 0.75em;
        counter-increment: stack-layer;
        content: counter(stack-layer);
    }

    &:not(.invisible)>.layer {
        border-radius: var(--slide-border-radius);
        padding: 0.5em;

        background-color: var(--slide-background-color);
        box-shadow: var(--br-shadow);

        &.overlay {
            background-color: transparent;
        }
    }
}

:where(#ld-slides-pane, #ld-light-table-dialog) .stack>.layer {
    width: 100%;
    /* DON'T ADD: height: 100%; !!! */

    position: absolute;
    top: 0;
    left: 0;

    background-color: var(--slide-background-color);
}




/*
    Styling of slides which act as sub section headers.

    <code>div class="ld-slide new-subsection"...</code>
*/

@property --subsection-title-shadow-angle {
    syntax: '<angle>';
    inherits: false;
    initial-value: 0deg;
}

div.ld-slide.new-subsection {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-decoration-color: var(--dhbw-light-gray);

    &::after {
        content: var(--dhbw-logo);
        position: absolute;
        top: 0px;
        right: 0px;
        scale: 0.50;
        translate: 60px -25px;
    }

    >h2 {
        width: 100%;
        padding: var(--slide-padding);
        /*border: 1px solid var(--dhbw-gray);*/
        border-radius: 0 calc(var(--slide-border-radius) * 0.75) calc(var(--slide-border-radius) * 0.75) 0;
        margin-left: calc(-2 * var(--slide-lr-padding));
        color: whitesmoke;
        background-color: var(--dhbw-gray);
        font-size: 1.666em;
        text-align: center;
        position: relative;
        /*box-shadow: var(--br-shadow);*/

        /*&::after,
        &::before {
            content: "";
            position: absolute;
            width: 100%;
            height: 100%;
            border-radius: calc(var(--slide-border-radius) * 0.5);
            background-image: conic-gradient(from var(--subsection-title-shadow-angle), var(--dhbw-gray), var(--dhbw-red), var(--dhbw-gray));
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            padding: 10px;
            z-index: -1;
            / *animation: rotate-subsection-title-shadow 5s   
              infinite linear;* /
        }
        &::after {
            padding: 3px;
            filter: opacity(0.35) blur(2px);
        }
        &::before {
            filter: blur(15px) opacity(0.5);
        }
        */
    }
}

@keyframes rotate-subsection-title-shadow {
    0% {
        --subsection-title-shadow-angle: 0deg;
    }

    100% {
        --subsection-title-shadow-angle: 360deg;
    }
}