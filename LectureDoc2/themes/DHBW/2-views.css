/*  ----------------------------------------------------------------------------
    Styling of elements that behave differently when the viewing mode changes.
    E.g., supplemental information is placed at different locations in the DOM
    when the view changes between the continuous view and the slide/light table 
    view. Also stack-based layouts are rendered on-top of each other in the 
    slides view and below each other in the continuous view.

    Changing the styling of these elements may have significant impact on 
    the respective view and may render it inoperable. But, it will not affect
    LectureDoc as such. 
    ------------------------------------------------------------------------  */


/*  0. Rendering of the slide numbers in the continuous view.

    (Slide numbers are handled differently in the slide view.)
*/
.ld-continuous-view-slide-number {
    bottom: 0px;
    right: 5px;
    font-size: 18px;
    /* We want to ensure that the number is always readable: */
    color: rgb(25, 25, 25);
    text-shadow: 1px 1px 1px white;
}


/*  1. Styling of supplemental information.

    Each slide can only have one block with supplemental information. The 
    supplemental information is placed differently in the DOM in the different 
    views.
    
    In continuous view mode the supplemental information element is moved below
    the element for the slide:
    
        <div class="ld-slide">...</>
        <div|aside class="supplemental">...</>

    In slide mode the element remains in the DOM at it is original place. 
    
    In slide mode the DIV with the supplemental information is positioned at the
    right side in the slide mode.
*/

.ld-continuous-view-slide-pane:not(:has(+.supplemental)) {
    margin-bottom: 2px;
}

.ld-continuous-view-slide-pane:has(+.supplemental) .ld-slide {
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
}

#ld-continuous-view-pane .supplemental {
    margin-bottom: 3px;
    padding: calc(var(--slide-lr-padding) * var(--ld-continuous-view-zoom-level));
    border-radius:
        0 0 calc(var(--slide-border-radius) * var(--ld-continuous-view-zoom-level)) calc(var(--slide-border-radius) * var(--ld-continuous-view-zoom-level));
    box-shadow: none;
    background-color: var(--slide-background-color);
    border-top: 1px dashed #333;
    /* OLD: We assume that the font size for the slide is roughly 2.5 times
       the size that is typically used for "standard text". 
        font-size: calc(var(--slide-font-size) / 2.5);
    */
    font-size: var(--supplemental-font-size);
}

:is(#ld-main-pane, #ld-light-table-slides) .supplemental {
    max-width: var(--ld-rel-max-supplemental-area-width);
    max-height: var(--ld-rel-max-supplemental-area-height);
    overflow-y: scroll;
    position: absolute;
    top: 0;
    right: 0;
    margin: 0;
    border-radius: var(--slide-border-radius) 0 0 var(--slide-border-radius);
    padding: calc(var(--slide-tb-padding) * 0.75) calc(var(--slide-lr-padding) * 0.75);
    /* the factor has to be larger than the factor used by translate (see below) */
    z-index: 1;
    background-color: var(--slide-background-color);
    transform:
        translateX(calc(100% - var(--slide-lr-padding) * 0.5)) translateY(calc(var(--ld-slide-height) * 0.5 - (100% * 0.5)));
    box-shadow: var(--trbl-shadow);
    transition: 0.75s;
}

:is(#ld-main-pane, #ld-light-table-slides) .supplemental:hover {
    transform:
        translateX(0%) translateY(calc(var(--ld-slide-height) * 0.5 - (100% * 0.5)));
    transition: 0.75s;
}


/*  2. Styling of stacked elements.

    To create elements which stack on top of each other on a single slide 
    (e.g., to create some animation) use a div with the class stack as the 
    parent of the elements in the stack. 
    Each element in the stack is represented by an element (div) with the class 
    layer. 
    
    Use the class overlay to make the background of the layer transparent. 
    
    The first layer must not be an overlay layer.

    Example:

        <div class="stack">
            <div class="layer">...</div>
            <div class="layer overlay incremental">...</div>
            <div class="layer incremental">...</div>
        </div>
    
    The first element in the stack is the bottom most element and rendered 
    first. All other elements are rendered on top of the previous element and
    will hide the underyling elements.
    Add the additional css class overlay to layers that should have a 
    transparent background.

    In general, stack based layouts are most often only useful if the class 
    incremental is added to the layers.
*/

/*div*/
.stack {
    position: relative;
    width: 100%;
    /* DON'T SET HEIGHT! */
    counter-reset: stack-layer 0;
}

#ld-continuous-view-pane .ld-slide .stack {
    display: flex;
    flex-direction: column;
} 

/*div*/
.layer {
    background-color: var(--slide-background-color);
    box-shadow: var(--br-shadow);
    border-radius: var(--slide-border-radius);
    padding: 0.5em;
    margin-bottom: 0.5em;
    /* All layers must have the same margin! */
}

@media print {
    .layer {
        page-break-inside: avoid;
    }
}

:is(#ld-continuous-view-pane, #ld-main-pane, #ld-light-table-dialog) .ld-slide .stack .layer.overlay {
    background-color: transparent;
}

/* Unfortunately, the final positioning needs to be done in JavaScript! 
#ld-continuous-view-pane .ld-slide .stack .layer {  
    position: absolute;  for all layers, unless the next layer is not an overlay layer.
    position: relative;  for a non-overlay layer following an overlay layer.
}
*/

:is(#ld-main-pane, #ld-light-table-dialog) .ld-slide .stack .layer {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    /* DON'T ADD: height: 100%; !!! */
    background-color: var(--slide-background-color);
}

/*  We only add numbers when we have more than one layer that is not an overlay 
    layer.
    */
.stack:has(.layer:not(.overlay):not(:first-child)) .layer:not(.overlay):not(.no-number)::before {
    position: absolute;
    right: 0.6em;
    bottom: 0.35em;
    font-size: 0.75em;
    counter-increment: stack-layer;
    content: counter(stack-layer);
}

:is(#ld-continuous-view-pane, #ld-main-pane, #ld-light-table-dialog) .ld-slide .stack .layer.warning {
    background-color: var(--dhbw-red);
    color: white;
    text-align: center;
}

:is(#ld-light-table-dialog) .ld-slide .stack {
    transform-style: preserve-3d;
    transform: translateY(-250px) perspective(2400px) rotateX(80deg);
}

/* IMPROVE Make it possible to rotate the stack and select a stack layer by 
adding some kind of "indicating" div.
:is(#ld-main-pane) .ld-slide .stack:hover {
    transform-style: preserve-3d;
    transform: translateY(-250px) perspective(2400px) rotateX(80deg);
    transition: 1s ease-in;
}
*/

:is(#ld-main-pane, #ld-light-table-dialog) .ld-slide .stack .layer {
    transform: translateZ(calc(var(--index) * -50px));
    /* see below for "--index" */
}

/*
    We associate the nth-child with a custom data attribute index that we  
    use in the css calculations!

    See https://crinkles.dev/writing/a-nth-child-css-trick/
    See https://crinkles.dev/writing/use-the-child-element-count-in-css/ 
*/

.stack .layer:nth-child(1) {
    --index: 1;
}

.stack .layer:nth-child(2) {
    --index: 2;
}

.stack .layer:nth-child(3) {
    --index: 3;
}

.stack .layer:nth-child(4) {
    --index: 4;
}

.stack .layer:nth-child(5) {
    --index: 5;
}

.stack .layer:nth-child(6) {
    --index: 6;
}

.stack .layer:nth-child(7) {
    --index: 7;
}

.stack .layer:nth-child(8) {
    --index: 8;
}

.stack .layer:nth-child(9) {
    --index: 9;
}

.stack .layer:nth-child(10) {
    --index: 10;
}