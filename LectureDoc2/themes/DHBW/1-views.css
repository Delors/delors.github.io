/*  ----------------------------------------------------------------------------
    The very fundamental definitions for slides.
*/ 
:root {
    /*  48px to have roughly 16 lines of text on a 1200px height slide. */
    font: 48px "Helvetica", sans-serif;
    line-height: 1.5;
    font-weight: 300;
}

.ld-slide {
    background-color: var(--slide-background-color);
    padding: 0.75rem;
    border-radius: 0.5rem;
}

/*  Rendering of the slide number in the continuous view.

    (Slide numbers are handled differently in the slide view.)
*/
.ld-continuous-view-slide-number {
    bottom: 0px;
    right: 5px;
    font-size: 18px;
    color: rgb(25, 25, 25);
    text-shadow: 1px 1px 1px white;
}

/*  ----------------------------------------------------------------------------
    Styling of elements that behave differently when the viewing mode changes.
    E.g., supplemental information is placed at different locations in the DOM
    when the view changes between the continuous view and the slide/light table 
    view.

    Changing the styling of these elements may have significant impact on 
    the respective view and may render it inoperable. But, it will not affect
    LectureDoc as such. 
*/

/*  1. Styling of supplemental information.

    Each slide can only have one supplemental information (aside or div). The 
    supplemental information is placed differently in the DOM when the view 
    mode changes.
    
    In continuous view mode the supplemental information element is moved below
    the element for the slide:
    
        <div class="ld-slide">...</>
        <div|aside class="supplemental">...</>

    In slide mode the element remains in the DOM at it is original place. 
    
    Here, the DIV with the supplemental information is positioned at the right 
    side in the slide mode.
*/

.ld-continuous-view-slide-pane:not(:has(+.supplemental)){
    margin-bottom: 3px;
} 
.ld-continuous-view-slide-pane:has(+.supplemental) .ld-slide {
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
}

#ld-continuous-view-pane .supplemental {
    margin-bottom: 3px;
    padding: calc(0.75rem * var(--ld-continuous-view-zoom-level)); 
    border-radius: 0 0 0.5rem 0.5rem;
    box-shadow: none;
    background-color: white; 
    border-top: 1px dashed #333;
    color: #333;
    font-size: 0.4rem;
}

:is(#ld-main-pane, #ld-light-table-slides) .supplemental {
    max-width: 75%;
    max-height: 70%;
    margin:0;
    border-radius: 1em 0 0 1em;
    padding: 18px 36px 18px 36px;
    position: absolute;
    top: 0;
    right: 0;
    background-color: white;
    overflow-y: scroll;
    font-size: 0.90rem;
    transform: 
        translateX(calc(100% - 18px)) 
        translateY(calc(
            var(--ld-slide-height) * var(--ld-continuous-view-zoom-level) 
            - ( 100% * var(--ld-continuous-view-zoom-level))));
    box-shadow: -4px  0px 8px 0px gray,
                -4px  4px 8px 0px gray,
                 4px  4px 8px 0px gray, 
                -4px -4px 8px 0px gray;
    transition: 0.75s;
}

:is(#ld-main-pane, #ld-light-table-slides) .supplemental:hover{
    transform: 
        translateX(0%) 
        translateY(calc(
            var(--ld-slide-height) * var(--ld-continuous-view-zoom-level) 
            - ( 100% * var(--ld-continuous-view-zoom-level))));
    transition: 0.75s;
}


/*  2. Styling of stacked elements.

    To create elements which stack on top of each other use a div with the class
    stack as the parent of the elements in the stack. Eeach element in the 
    stack is represented by an element (div) with the class layer. User the
    class overlay to make the background of the layer transparent. The first
    layer must not be an overlay layer.

    Example:

        <div class="stack">
            <div class="layer">...</div>
            <div class="layer overlay">...</div>
            <div class="layer">...</div>
        </div>
    
    The first element in the stack is the bottom most element and rendered 
    first. All other elements are rendered on top of the previous element and
    will hide the underyling elements.
    Add the additional class overlay to layers that should have a transparent
    background.

    If the layers are opqaue, it is most often required to add incremental
    to make the lower layers visible. 
*/

/*div*/.stack {
    position: relative;
    width: 100%;
    height: 100%; /* reset in JavaScript ld-animations.js to the required size.*/
    counter-reset: stack-layer 0;
}

:is(#ld-continuous-view-pane, #ld-main-pane, #ld-light-table-dialog) .ld-slide .stack /*div*/.layer.overlay {
    background-color: transparent;
}

#ld-continuous-view-pane .ld-slide .stack /*div*/.layer {
    /* Unfortunately, the final positioning needs to be done in JavaScript! */
    position: relative; 
}

:is(#ld-main-pane, #ld-light-table-dialog) .ld-slide .stack /*div*/.layer {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    /* DON'T ADD: height: 100%; !!! */
    background-color: var(--slide-background-color);  
}

.layer:not(.overlay)::before {
    font-size: 0.75em;
    position: absolute;
    right: 0.6em;
    bottom: 0.35em;
    counter-increment: stack-layer;
    content: counter(stack-layer);
}

:is(#ld-continuous-view-pane, #ld-main-pane, #ld-light-table-dialog) .ld-slide .stack .layer.warning {
    background-color: var(--ld-dhbw-red);
    color: white;
    text-align: center;
}

:is(#ld-light-table-dialog) .ld-slide .stack {
    transform-style: preserve-3d;
    transform: translateY(-250px) perspective(2400px) rotateX(80deg);  
}

/* IMPROVE Make it possible to rotate the stack by adding some kind of "indicating" div.
:is(#ld-main-pane) .ld-slide .stack:hover {
    transform-style: preserve-3d;
    transform: translateY(-250px) perspective(2400px) rotateX(80deg);
    transition: 1s ease-in;
}
*/

:is(#ld-main-pane, #ld-light-table-dialog) .ld-slide .stack .layer {
    transform: translateZ(calc(var(--index) * -50px));  
}
