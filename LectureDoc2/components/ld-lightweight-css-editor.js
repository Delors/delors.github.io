class LDLightweightCSSEditor extends HTMLElement {
    #id;

    constructor() {
        super();
    }

    initialize(heightInLines, style, body) {
        const shadow = this.attachShadow({ mode: "open" });
        shadow.innerHTML = `
            <style>
                style[contenteditable] {
                    display: block;
                    position: relative;

                    height: ${heightInLines};
                    overflow: scroll;
                    border: thin solid black;
                    padding: 0.25em;

                    font-family: var(--code-font-family);
                    font-size: smaller;
                    white-space: pre;

                    &::before {
                        content: "üñäÔ∏è";
                        position: absolute;
                        top: 0.1em;
                        right: 0.1em;
                    }
                }
            </style>
            <style contenteditable onkeydown="event.stopPropagation();this.getRootNode().host.cssEdited()">${style}</style>
            ${body}
            `;
    }

    cssEdited() {
        // Check if the configuration was not completed (i.e., the document
        // is setup for sharing content.)
        if (this.id === undefined) return;

        // We have to wait until the effect of keydown was actually applied
        // to our DOM.
        setTimeout(() => {
            const newText = this.shadowRoot.querySelector(
                "style[contenteditable]",
            ).textContent;
            lectureDoc2.propagateStateChange("lightweightCSSEditorUpdate", [
                this.id,
                newText,
            ]);
        });
    }

    completeConfiguration(id) {
        this.id = id;

        lectureDoc2.interWindowMessageHandlers.addIndexedHandler(
            "lightweightCSSEditorUpdate",
            id,
            (text) => {
                this.shadowRoot.querySelector(
                    "style[contenteditable]",
                ).textContent = text;
            },
        );
    }
}

customElements.define("ld-lightweight-css-editor", LDLightweightCSSEditor);

/**
 * Each instance of the editor has to get a unique id to make it possible
 * to identify if an update is related to a specific editor instance.
 */
const configureLightweightCSSEditors = () => {
    document
        .querySelectorAll("ld-lightweight-css-editor")
        .forEach((editor, i) => editor.completeConfiguration(i));
};

/**
 * Basically, we search for all rst module declarations (generated by rst2ld)
 * and replace them with instances of our custom element.
 */
const instantiateLightweightCSSEditors = () => {
    const cssEditorContainers = document
        .querySelector("body > template")
        .content.querySelectorAll(".module.lightweight-css-editor");

    cssEditorContainers.forEach((cssEditorContainer) => {
        try {
            // The configuration is saved in an XML document. We parse it
            // using the Browser's XML parser (which is way more convenient)
            // than using JSON in this case because the data may contain
            // line breaks and the like.
            const parser = new DOMParser();
            const config = parser.parseFromString(
                cssEditorContainer.textContent,
                "text/xml",
            );
            const height = config.querySelector("height").textContent;
            const style = config.querySelector("style").textContent;
            const body = config.querySelector("body").textContent;

            const editor = document.createElement("ld-lightweight-css-editor");
            editor.initialize(height, style, body);

            cssEditorContainer.parentElement.replaceChild(
                editor,
                cssEditorContainer,
            );
        } catch (error) {
            console.error(
                "instantiating lightweight css editor failed: ",
                error,
                cssEditorContainer.textContent,
            );
        }
    });
};

// Recall that lectureDoc2 is readily available in the global scope.
lectureDoc2.ldEvents.addEventListener(
    "beforeLDDOMManipulations",
    instantiateLightweightCSSEditors,
);

lectureDoc2.ldEvents.addEventListener(
    "afterLDDOMManipulations",
    configureLightweightCSSEditors,
);
